# Makefile for Todo App DevOps Project

# Variables
PROJECT_NAME ?= todo-app
AWS_REGION ?= us-east-1
CLUSTER_NAME ?= $(PROJECT_NAME)-cluster
NAMESPACE ?= $(PROJECT_NAME)
IMAGE_TAG ?= latest
ENVIRONMENT ?= dev

# Derived variables
ECR_REGISTRY = $(shell aws sts get-caller-identity --query Account --output text 2>/dev/null).dkr.ecr.$(AWS_REGION).amazonaws.com
FRONTEND_IMAGE = $(ECR_REGISTRY)/$(PROJECT_NAME)/frontend:$(IMAGE_TAG)
BACKEND_IMAGE = $(ECR_REGISTRY)/$(PROJECT_NAME)/backend:$(IMAGE_TAG)

# Colors for output
BLUE = \033[0;34m
GREEN = \033[0;32m
YELLOW = \033[1;33m
RED = \033[0;31m
NC = \033[0m # No Color

# Helper functions
define log
	@echo -e "$(BLUE)[INFO]$(NC) $(1)"
endef

define success
	@echo -e "$(GREEN)[SUCCESS]$(NC) $(1)"
endef

define warning
	@echo -e "$(YELLOW)[WARNING]$(NC) $(1)"
endef

define error
	@echo -e "$(RED)[ERROR]$(NC) $(1)"
endef

.PHONY: help
help: ## Show this help message
	@echo "Todo App DevOps Project"
	@echo "======================="
	@echo ""
	@echo "Available commands:"
	@echo ""
	@awk 'BEGIN {FS = ":.*##"} /^[a-zA-Z_-]+:.*?##/ { printf "  $(BLUE)%-20s$(NC) %s\n", $$1, $$2 }' $(MAKEFILE_LIST)
	@echo ""
	@echo "Examples:"
	@echo "  make setup                    # Complete project setup"
	@echo "  make deploy                   # Deploy application"
	@echo "  make test                     # Run all tests"
	@echo "  make clean                    # Clean up resources"

.PHONY: check-deps
check-deps: ## Check if required tools are installed
	$(call log,"Checking dependencies...")
	@command -v terraform >/dev/null 2>&1 || { $(call error,"terraform is required but not installed"); exit 1; }
	@command -v ansible >/dev/null 2>&1 || { $(call error,"ansible is required but not installed"); exit 1; }
	@command -v kubectl >/dev/null 2>&1 || { $(call error,"kubectl is required but not installed"); exit 1; }
	@command -v helm >/dev/null 2>&1 || { $(call error,"helm is required but not installed"); exit 1; }
	@command -v aws >/dev/null 2>&1 || { $(call error,"aws cli is required but not installed"); exit 1; }
	@command -v docker >/dev/null 2>&1 || { $(call error,"docker is required but not installed"); exit 1; }
	@aws sts get-caller-identity >/dev/null 2>&1 || { $(call error,"AWS credentials not configured"); exit 1; }
	$(call success,"All dependencies are installed")

.PHONY: setup
setup: check-deps ## Complete project setup (infrastructure + configuration)
	$(call log,"Starting complete project setup...")
	chmod +x scripts/*.sh
	./scripts/setup.sh
	$(call success,"Project setup completed")

.PHONY: terraform-init
terraform-init: ## Initialize Terraform
	$(call log,"Initializing Terraform...")
	cd terraform && terraform init
	$(call success,"Terraform initialized")

.PHONY: terraform-plan
terraform-plan: terraform-init ## Plan Terraform changes
	$(call log,"Planning Terraform changes...")
	cd terraform && terraform plan -out=tfplan
	$(call success,"Terraform plan completed")

.PHONY: terraform-apply
terraform-apply: terraform-plan ## Apply Terraform changes
	$(call log,"Applying Terraform changes...")
	cd terraform && terraform apply tfplan
	$(call success,"Terraform applied successfully")

.PHONY: terraform-destroy
terraform-destroy: ## Destroy Terraform infrastructure
	$(call warning,"This will destroy all infrastructure!")
	@read -p "Are you sure? [y/N] " -n 1 -r; \
	echo; \
	if [[ $$REPLY =~ ^[Yy]$$ ]]; then \
		cd terraform && terraform destroy; \
	fi

.PHONY: ansible-run
ansible-run: ## Run Ansible playbooks
	$(call log,"Running Ansible playbooks...")
	cd ansible && ansible-playbook -i inventory.ini site.yaml
	$(call success,"Ansible playbooks completed")

.PHONY: build-images
build-images: ## Build Docker images
	$(call log,"Building Docker images...")
	cd app/frontend && docker build -t $(PROJECT_NAME)/frontend:$(IMAGE_TAG) .
	cd app/backend && docker build -t $(PROJECT_NAME)/backend:$(IMAGE_TAG) .
	$(call success,"Docker images built")

.PHONY: push-images
push-images: build-images ## Build and push images to ECR
	$(call log,"Pushing images to ECR...")
	aws ecr get-login-password --region $(AWS_REGION) | docker login --username AWS --password-stdin $(ECR_REGISTRY)
	docker tag $(PROJECT_NAME)/frontend:$(IMAGE_TAG) $(FRONTEND_IMAGE)
	docker tag $(PROJECT_NAME)/backend:$(IMAGE_TAG) $(BACKEND_IMAGE)
	docker push $(FRONTEND_IMAGE)
	docker push $(BACKEND_IMAGE)
	$(call success,"Images pushed to ECR")

.PHONY: deploy
deploy: ## Deploy application to Kubernetes
	$(call log,"Deploying application...")
	chmod +x scripts/deploy.sh
	./scripts/deploy.sh --tag $(IMAGE_TAG) --namespace $(NAMESPACE)
	$(call success,"Application deployed")

.PHONY: deploy-helm
deploy-helm: ## Deploy using Helm
	$(call log,"Deploying with Helm...")
	helm upgrade --install $(PROJECT_NAME) ./helm/todo-app \
		--namespace $(NAMESPACE) \
		--create-namespace \
		--set image.repository=$(ECR_REGISTRY)/$(PROJECT_NAME) \
		--set image.tag=$(IMAGE_TAG) \
		--set namespace=$(NAMESPACE) \
		--wait
	$(call success,"Helm deployment completed")

.PHONY: deploy-k8s
deploy-k8s: ## Deploy using kubectl
	$(call log,"Deploying with kubectl...")
	kubectl apply -f k8s/namespace.yaml
	kubectl apply -f k8s/ -n $(NAMESPACE)
	$(call success,"Kubectl deployment completed")

.PHONY: deploy-monitoring
deploy-monitoring: ## Deploy monitoring stack
	$(call log,"Deploying monitoring stack...")
	kubectl create namespace monitoring --dry-run=client -o yaml | kubectl apply -f -
	kubectl apply -f monitoring/prometheus/prometheus.yaml
	kubectl apply -f monitoring/grafana/grafana-deployment.yaml
	kubectl apply -f monitoring/alertmanager/alertmanager.yaml
	$(call success,"Monitoring stack deployed")

.PHONY: local-up
local-up: ## Start local development environment
	$(call log,"Starting local environment...")
	cd app && docker-compose up -d
	$(call success,"Local environment started")

.PHONY: local-down
local-down: ## Stop local development environment
	$(call log,"Stopping local environment...")
	cd app && docker-compose down
	$(call success,"Local environment stopped")

.PHONY: test
test: ## Run comprehensive tests
	$(call log,"Running tests...")
	chmod +x scripts/test.sh
	./scripts/test.sh
	$(call success,"Tests completed")

.PHONY: test-local
test-local: ## Test local environment only
	$(call log,"Testing local environment...")
	./scripts/test.sh --local-only

.PHONY: test-k8s
test-k8s: ## Test Kubernetes environment only
	$(call log,"Testing Kubernetes environment...")
	./scripts/test.sh --k8s-only --namespace $(NAMESPACE)

.PHONY: lint
lint: ## Run linting and code quality checks
	$(call log,"Running linting...")
	cd app/frontend && npm run lint || true
	cd app/backend && npm run lint || true
	terraform fmt -check terraform/ || true
	ansible-lint ansible/ || true

.PHONY: security-scan
security-scan: ## Run security scans
	$(call log,"Running security scans...")
	@command -v trivy >/dev/null 2>&1 && trivy fs . || $(call warning,"trivy not installed, skipping filesystem scan")
	@command -v trivy >/dev/null 2>&1 && docker images --format "table {{.Repository}}:{{.Tag}}" | grep $(PROJECT_NAME) | xargs -I {} trivy image {} || $(call warning,"No images to scan")

.PHONY: get-urls
get-urls: ## Get application URLs
	$(call log,"Getting application URLs...")
	@echo "Frontend LoadBalancer URL:"
	@kubectl get service $(PROJECT_NAME)-frontend -n $(NAMESPACE) -o jsonpath='{.status.loadBalancer.ingress[0].hostname}' 2>/dev/null || echo "LoadBalancer not ready"
	@echo ""
	@echo "Grafana URL (if deployed):"
	@kubectl get service grafana -n monitoring -o jsonpath='{.status.loadBalancer.ingress[0].hostname}' 2>/dev/null || echo "Grafana not ready"
	@echo ""
	@echo "Jenkins URL (from Terraform output):"
	@cd terraform && terraform output jenkins_url 2>/dev/null || echo "Run terraform first"

.PHONY: logs
logs: ## Show application logs
	$(call log,"Showing application logs...")
	kubectl logs -f deployment/$(PROJECT_NAME)-frontend -n $(NAMESPACE) &
	kubectl logs -f deployment/$(PROJECT_NAME)-backend -n $(NAMESPACE)

.PHONY: status
status: ## Show deployment status
	$(call log,"Showing deployment status...")
	kubectl get all -n $(NAMESPACE)
	@echo ""
	@echo "Pod status:"
	kubectl get pods -n $(NAMESPACE) -o wide

.PHONY: clean
clean: ## Clean up local resources
	$(call log,"Cleaning up local resources...")
	cd app && docker-compose down -v --remove-orphans || true
	docker system prune -f
	$(call success,"Local cleanup completed")

.PHONY: clean-k8s
clean-k8s: ## Clean up Kubernetes resources
	$(call warning,"This will remove all Kubernetes resources!")
	@read -p "Are you sure? [y/N] " -n 1 -r; \
	echo; \
	if [[ $$REPLY =~ ^[Yy]$$ ]]; then \
		helm uninstall $(PROJECT_NAME) -n $(NAMESPACE) || true; \
		kubectl delete namespace $(NAMESPACE) || true; \
		kubectl delete namespace monitoring || true; \
	fi

.PHONY: clean-all
clean-all: clean clean-k8s terraform-destroy ## Clean up everything
	$(call success,"Complete cleanup finished")

.PHONY: port-forward
port-forward: ## Port forward services for local access
	$(call log,"Setting up port forwarding...")
	kubectl port-forward svc/$(PROJECT_NAME)-frontend 8080:80 -n $(NAMESPACE) &
	kubectl port-forward svc/$(PROJECT_NAME)-backend 8081:3000 -n $(NAMESPACE) &
	kubectl port-forward svc/grafana 8082:3000 -n monitoring &
	$(call success,"Port forwarding active - Frontend: http://localhost:8080, Backend: http://localhost:8081, Grafana: http://localhost:8082")

# Default target
.DEFAULT_GOAL := help